---
description: 
globs: 
alwaysApply: true
---
---
description: Руководство по созданию продуктов с интеграцией Figma, Cursor, LLM и MCP
globs: "**/*.py"
---

## Overview

Данный документ содержит единые рекомендации (rule) для разработки продуктов, где требуется глубоко интегрировать Figma (API + плагин) и Cursor через протокол MCP (Model Context Protocol), используя возможности AI-моделей (LLM) для автоматизации создания и редактирования дизайна. Предполагается, что вы используете Python (FastMCP SDK) для MCP-сервера и JavaScript/TypeScript для плагина Figma.

## Project Structure

Рекомендуется придерживаться следующей структуры, чтобы код оставался понятным, а команды, связанные с Figma и MCP, были легко обнаружимы:

.
├── cursor                # Настройки Cursor (Project Rules, Notepads, .cursorignore)
│   ├── rules
│   │   └── this_rule.yaml  # Текущий файл с рекомендациями
│   └── notepads
├── mcp_server
│   ├── server.py         # Основной MCP-сервер (FastMCP)
│   ├── tools             # Папка с “tools” - инструментами для взаимодействия с Figma/LLM
│   │   ├── figma_read.py
│   │   ├── figma_write.py
│   │   └── …
│   ├── resources         # Папка с “resources” - ресурсами для контекста
│   │   └── …
│   └── plugins           # Доп. функциональность или адаптеры (например, WebSocket-логика)
├── figma_plugin
│   ├── manifest.json     # Настройка Figma-плагина
│   ├── plugin.ts         # Код плагина
│   └── …
├── docs                  # Дополнительная документация по API, интеграции и т.д.
├── tests                 # Тесты (юнит, интеграционные)
└── requirements.txt      # Зависимости Python (FastMCP, requests, и т.д.)

## MCP Server Setup

### 1. Создание MCP-сервера (Python + FastMCP)

```python
# mcp_server/server.py
from mcp.server.fastmcp import FastMCP
from figma_read import get_figma_data
from figma_write import update_figma_node

# Инициализация
mcp = FastMCP("FigmaIntegration")

# Регистрация инструментов
mcp.tool()(get_figma_data)
mcp.tool()(update_figma_node)

if __name__ == "__main__":
    mcp.run()

	•	FastMCP упрощает регистрацию инструментов (tools) и ресурсов (resources).
	•	Используйте @mcp.tool() для описания операций чтения/записи данных в Figma, а также для взаимодействия с LLM.

2. Структурирование кода MCP
	•	tools/: храните функции, которые будут «инструментами» MCP (например, get_figma_data, update_figma_node).
	•	resources/: создавайте «ресурсы», если нужно возвращать статические/читаемые данные (например, «конфигурация дизайн-токенов»).

Figma Plugin Setup

1. Плагин Figma для изменений

Так как Figma REST API не даёт прямой возможности редактировать дизайн, потребуется плагин:

// figma_plugin/plugin.ts

// Пример: создание/обновление прямоугольника
figma.ui.onmessage = async (msg) => {
  if (msg.type === 'UPDATE_RECT') {
    const node = figma.getNodeById(msg.nodeId) as RectangleNode;
    if (node) {
      node.fills = [{ type: 'SOLID', color: msg.color }];
    }
  }
  // ...
};

// Запуск соединения (WebSocket или postMessage) с сервером

	•	Плагин получает команды от MCP-сервера (через WebSocket или postMessage).
	•	Для тестов в режиме разработки используйте Figma → Plugins → Development → Import plugin from manifest.

2. Взаимодействие MCP ↔ Плагин
	•	Figma REST API: только для чтения структуры (страницы, узлы и т.д.).
	•	Figma Plugin API: для внесения изменений (цвет, текст, размеры, компоненты).

Best Practices
	1.	Асинхронность и кеширование
	•	Если ваш инструмент запрашивает большой проект из Figma API, кешируйте ответ (redis, локальные dict-структуры и т.д.), чтобы не нагружать Figma и не тратить время на повторные запросы.
	2.	Разделение на чтение и запись
	•	Создавайте отдельные инструменты для «чтения» (только получение данных) и «записи» (изменение дизайна через плагин). Это упрощает логику и снижает риск случайных «побочных эффектов».
	3.	Многовариантные ответы (Multi-Choice Prompting)
	•	Если предлагаете изменения UI (цвет, шрифты, отступы), генерируйте 2–3 варианта для выбора (Cursor Agent).
	•	Сопровождайте варианты коротким описанием плюсов/минусов (например, контраст, соответствие гайдлайнам).
	4.	Логирование действий
	•	Записывайте в лог ключевые события: запрос к Figma API, результат выполнения плагина, ошибки соединения.
	•	Храните логи в удобном формате (например, JSON), чтобы упростить анализ и отладку.
	5.	Безопасное хранение токенов
	•	Figma Personal Access Token, API-ключи для LLM-сервисов — храните в переменных окружения, а не в репозитории.
	•	При генерации кода или комментариев AI не должен раскрывать приватные ключи.
	6.	Автоматические тесты
	•	Добавьте модульные тесты на функции MCP-инструментов (pytest, unittest).
	•	Интеграционные тесты: эмулируйте запросы к Figma (mock) или используйте тестовый аккаунт.
	7.	Оптимизированное взаимодействие с LLM
	•	Передавайте в модель только нужный фрагмент JSON (не весь файл).
	•	Для сложных операций (например, рендеринг фрейма или анализ сотен слоёв) разбивайте запросы, чтобы не перегружать контекст.
	8.	Стиль кода и единообразие
	•	Используйте линтеры/форматтеры (Black, Prettier).
	•	Придерживайтесь DRY (Don’t Repeat Yourself): дублирующую логику выносите в общий модуль.

Version Compatibility
	•	Python 3.9+ для совместимости с FastMCP SDK
	•	Figma Plugin рекомендуется TypeScript 4+, совместимая версия Figma Plugin API
	•	Cursor версия 0.45+ (или выше) с поддержкой MCP и Notepads
	•	LLM (OpenAI / локальная модель) — убедитесь, что используете подходящий транспорт/протокол в Cursor

Further Resources
	•	Официальная документация Cursor
	•	Figma REST API
	•	Figma Plugin API
	•	FastMCP Python SDK
	•	OpenAI API Docs
	•	Redis — для кеширования и обмена данными

⸻

Важно: Эти рекомендации ориентированы на гибкость. Вносите изменения, учитывая масштаб вашего проекта и ограничения. Основная цель — упростить и стандартизировать написание MCP-сервера (через Python) и плагины Figma, работая в связке с Cursor и AI-моделью для быстрой автоматизации и обновления дизайна.