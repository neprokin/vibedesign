{# 
{
  "description": "Шаблон для генерации кода на основе дизайна из Figma",
  "parameters": {
    "design_data": {
      "description": "Данные компонента/дизайна из Figma API"
    },
    "framework": {
      "description": "Фреймворк для генерации кода (react, vue, html)",
      "default": "react"
    },
    "css_framework": {
      "description": "CSS фреймворк или методология (tailwind, styled-components, css-modules, scss)",
      "default": "tailwind"
    },
    "responsive": {
      "description": "Нужно ли добавлять адаптивные стили",
      "default": true
    },
    "design_tokens": {
      "description": "Дизайн-токены проекта",
      "default": {}
    },
    "component_name": {
      "description": "Имя создаваемого компонента",
      "default": "FigmaComponent"
    }
  },
  "category": "code"
}
#}

Сгенерируй код для фреймворка {{ framework }} на основе следующего дизайна из Figma:

```json
{{ design_data | tojson }}
```

{% if design_tokens and design_tokens|length > 0 %}
Используй следующие дизайн-токены проекта:
```json
{{ design_tokens | tojson }}
```
{% endif %}

Имя компонента: {{ component_name }}
CSS фреймворк/методология: {{ css_framework }}
Должен быть адаптивным: {{ "Да" if responsive else "Нет" }}

## Требования к генерации кода:

1. **Общие принципы**:
   - Создай чистый, читаемый и поддерживаемый код
   - Следуй лучшим практикам для выбранного фреймворка
   - Обеспечь точное соответствие дизайну (цвета, размеры, шрифты, отступы)
   - Используй семантические элементы HTML

2. **Особенности фреймворка**:
   {% if framework == "react" %}
   - Используй функциональные компоненты и хуки React
   - Следуй принципам композиции компонентов
   - Добавь типизацию с использованием TypeScript
   - Оптимизируй рендеринг с помощью мемоизации, где это уместно
   {% elif framework == "vue" %}
   - Используй Composition API для Vue 3
   - Разделяй логику и представление
   - Добавь типизацию с использованием TypeScript
   - Используй реактивные свойства для управления состоянием
   {% else %}
   - Используй современный HTML5 и CSS3
   - Организуй чистую структуру документа
   - Добавь необходимые атрибуты для accessibility
   - Минимизируй использование JavaScript, если не требуется иное
   {% endif %}

3. **Стилизация**:
   {% if css_framework == "tailwind" %}
   - Используй классы Tailwind CSS для стилизации
   - Следуй методологии utility-first
   - Для сложных случаев используй @apply в отдельных файлах
   - Обеспечь соответствие дизайн-токенам через tailwind.config.js
   {% elif css_framework == "styled-components" %}
   - Создай styled-components для каждого элемента
   - Используй пропсы для динамических стилей
   - Создай глобальные стили для дизайн-токенов
   - Используй ThemeProvider для доступа к дизайн-системе
   {% elif css_framework == "css-modules" %}
   - Создай модульные CSS файлы
   - Используй локальные классы для изоляции стилей
   - Следуй методологии BEM для именования классов
   - Создай переменные для дизайн-токенов
   {% else %}
   - Используй SCSS с переменными для дизайн-токенов
   - Следуй методологии BEM для организации стилей
   - Создай миксины для повторяющихся стилей
   - Разделяй стили на логические блоки
   {% endif %}

4. **Адаптивность**:
   {% if responsive %}
   - Используй медиа-запросы для адаптации под разные устройства
   - Следуй подходу mobile-first
   - Обеспечь корректное отображение на разных экранах
   - Учитывай различные типы взаимодействия (touch vs mouse)
   {% endif %}

5. **Доступность (a11y)**:
   - Добавь правильные aria- атрибуты
   - Обеспечь правильный контраст цветов
   - Поддерживай навигацию с клавиатуры
   - Учитывай требования WCAG AA

6. **Производительность**:
   - Избегай излишнего вложения компонентов
   - Оптимизируй перерисовки
   - Используй lazy-loading для изображений
   - Минимизируй CSS и JS, где возможно

Верни ответ в следующем формате:

```json
{
  "files": [
    {
      "filename": "имя_файла.расширение",
      "content": "содержимое файла",
      "description": "описание файла"
    }
  ],
  "dependencies": [
    {
      "name": "имя_зависимости",
      "version": "версия_зависимости",
      "type": "dev/prod"
    }
  ],
  "implementation_notes": [
    "заметка 1",
    "заметка 2"
  ]
}
```

Код должен быть полным, рабочим и готовым к использованию. Не используй заполнители вроде "// Дополнительная логика здесь".

Верни только JSON, без дополнительного текста. 